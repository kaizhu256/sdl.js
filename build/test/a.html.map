{"version":3,"file":"a.html","sources":["testdraw2.c"],"names":[],"mappingswCA;;AAZA;AAAA;;;AA1BA;AAAA;;;AACA;AAAA;AAAA;AAAA;AACA;;AACA;AACA;AAAA;;;AAEA;;AACA;AACA;AAAA;;;;AAGA;AAAA;;;AAYA;;;AAXA;AAAA;AAAA;AAAA;AACA;;AACA;AACA;AAAA;;;;AAEA;;AACA;AACA;AAAA;;;;;;;AAGA;AAAA;AACA;AADA;AAGA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AArCA;AAAA;AAAA;;;;;;;AAwCA;;;;;;;;;;;;AAUA;AAEA;AAAA;;AAiCA;;AANA;AAAA;AACA;AACA;AACA;;;AA5BA;AAAA;;;AACA;AAAA;AAAA;AAAA;AACA;;AACA;AACA;AAAA;;;AAEA;;AACA;AACA;AAAA;;;;AAGA;AAAA;;;AAYA;;;AAXA;AAAA;AAAA;AAAA;AACA;;AACA;AACA;AAAA;;;;AAEA;;AACA;AACA;AAAA;;;;;;;AAGA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AA/BA;AAAA;AAAA;AAAA;;;;;;;AAiCA;;;;;;;;AASA;AAAA;;;AACA;AAAA;AADA;AAAA;;;;;;AAGA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAXA;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAcA;AAAA;;AAIA;;AAHA;AAGA;;;;;;;;;;;;AAGA;AAAA;AAMA;AAGA;AAGA;AAAA;AACA;;;AAiFA;;AA9EA;;;;;AAGA;AACA;;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;;;AACA;AAAA;;;;;AAGA;AAAA;AAAA;;;;;AAGA;AAAA;AAAA;;;;;AAGA;AAAA;AAAA;;;;;;;;AAKA;AAAA;AAAA;;AACA;;;;AAEA;AAAA;AAAA;;AACA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;AAIA;;;;;;;;AAKA;AAtCA;AAGA;;;;;;;;AAgCA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;;AA4CA;;;;;AAtCA;AAAA;;;AAsCA;;AAjCA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAOA;AAAA;AAIA;AACA;AAGA;AASA;AAAA;AAGA;AACA;;;AAKA;;AAJA;AAAA;AAAA;AACA;AAAA;;AAGA","sourcesContent":["/*\n  Copyright (C) 1997-2015 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely.\n*/\n\n/* Simple program:  draw as many random objects on the screen as possible */\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <time.h>\n\n#ifdef __EMSCRIPTEN__\n#include <emscripten/emscripten.h>\n#endif\n\n#include \"SDL_test_common.h\"\n\n#define NUM_OBJECTS 100\n\nstatic SDLTest_CommonState *state;\nstatic int num_objects;\nstatic SDL_bool cycle_color;\nstatic SDL_bool cycle_alpha;\nstatic int cycle_direction = 1;\nstatic int current_alpha = 255;\nstatic int current_color = 255;\nstatic SDL_BlendMode blendMode = SDL_BLENDMODE_NONE;\n\nint done;\n\nvoid\nDrawPoints(SDL_Renderer * renderer)\n{\n    int i;\n    int x, y;\n    SDL_Rect viewport;\n\n    /* Query the sizes */\n    SDL_RenderGetViewport(renderer, &viewport);\n\n    for (i = 0; i < num_objects * 4; ++i) {\n        /* Cycle the color and alpha, if desired */\n        if (cycle_color) {\n            current_color += cycle_direction;\n            if (current_color < 0) {\n                current_color = 0;\n                cycle_direction = -cycle_direction;\n            }\n            if (current_color > 255) {\n                current_color = 255;\n                cycle_direction = -cycle_direction;\n            }\n        }\n        if (cycle_alpha) {\n            current_alpha += cycle_direction;\n            if (current_alpha < 0) {\n                current_alpha = 0;\n                cycle_direction = -cycle_direction;\n            }\n            if (current_alpha > 255) {\n                current_alpha = 255;\n                cycle_direction = -cycle_direction;\n            }\n        }\n        SDL_SetRenderDrawColor(renderer, 255, (Uint8) current_color,\n                               (Uint8) current_color, (Uint8) current_alpha);\n\n        x = rand() % viewport.w;\n        y = rand() % viewport.h;\n        SDL_RenderDrawPoint(renderer, x, y);\n    }\n}\n\nvoid\nDrawLines(SDL_Renderer * renderer)\n{\n    int i;\n    int x1, y1, x2, y2;\n    SDL_Rect viewport;\n\n    /* Query the sizes */\n    SDL_RenderGetViewport(renderer, &viewport);\n\n    for (i = 0; i < num_objects; ++i) {\n        /* Cycle the color and alpha, if desired */\n        if (cycle_color) {\n            current_color += cycle_direction;\n            if (current_color < 0) {\n                current_color = 0;\n                cycle_direction = -cycle_direction;\n            }\n            if (current_color > 255) {\n                current_color = 255;\n                cycle_direction = -cycle_direction;\n            }\n        }\n        if (cycle_alpha) {\n            current_alpha += cycle_direction;\n            if (current_alpha < 0) {\n                current_alpha = 0;\n                cycle_direction = -cycle_direction;\n            }\n            if (current_alpha > 255) {\n                current_alpha = 255;\n                cycle_direction = -cycle_direction;\n            }\n        }\n        SDL_SetRenderDrawColor(renderer, 255, (Uint8) current_color,\n                               (Uint8) current_color, (Uint8) current_alpha);\n\n        if (i == 0) {\n            SDL_RenderDrawLine(renderer, 0, 0, viewport.w - 1, viewport.h - 1);\n            SDL_RenderDrawLine(renderer, 0, viewport.h - 1, viewport.w - 1, 0);\n            SDL_RenderDrawLine(renderer, 0, viewport.h / 2, viewport.w - 1, viewport.h / 2);\n            SDL_RenderDrawLine(renderer, viewport.w / 2, 0, viewport.w / 2, viewport.h - 1);\n        } else {\n            x1 = (rand() % (viewport.w*2)) - viewport.w;\n            x2 = (rand() % (viewport.w*2)) - viewport.w;\n            y1 = (rand() % (viewport.h*2)) - viewport.h;\n            y2 = (rand() % (viewport.h*2)) - viewport.h;\n            SDL_RenderDrawLine(renderer, x1, y1, x2, y2);\n        }\n    }\n}\n\nvoid\nDrawRects(SDL_Renderer * renderer)\n{\n    int i;\n    SDL_Rect rect;\n    SDL_Rect viewport;\n\n    /* Query the sizes */\n    SDL_RenderGetViewport(renderer, &viewport);\n\n    for (i = 0; i < num_objects / 4; ++i) {\n        /* Cycle the color and alpha, if desired */\n        if (cycle_color) {\n            current_color += cycle_direction;\n            if (current_color < 0) {\n                current_color = 0;\n                cycle_direction = -cycle_direction;\n            }\n            if (current_color > 255) {\n                current_color = 255;\n                cycle_direction = -cycle_direction;\n            }\n        }\n        if (cycle_alpha) {\n            current_alpha += cycle_direction;\n            if (current_alpha < 0) {\n                current_alpha = 0;\n                cycle_direction = -cycle_direction;\n            }\n            if (current_alpha > 255) {\n                current_alpha = 255;\n                cycle_direction = -cycle_direction;\n            }\n        }\n        SDL_SetRenderDrawColor(renderer, 255, (Uint8) current_color,\n                               (Uint8) current_color, (Uint8) current_alpha);\n\n        rect.w = rand() % (viewport.h / 2);\n        rect.h = rand() % (viewport.h / 2);\n        rect.x = (rand() % (viewport.w*2) - viewport.w) - (rect.w / 2);\n        rect.y = (rand() % (viewport.h*2) - viewport.h) - (rect.h / 2);\n        SDL_RenderFillRect(renderer, &rect);\n    }\n}\n\nvoid\nloop()\n{\n    int i;\n    SDL_Event event;\n\n    /* Check for events */\n    while (SDL_PollEvent(&event)) {\n        SDLTest_CommonEvent(state, &event, &done);\n    }\n    for (i = 0; i < state->num_windows; ++i) {\n        SDL_Renderer *renderer = state->renderers[i];\n        if (state->windows[i] == NULL)\n            continue;\n        SDL_SetRenderDrawColor(renderer, 0xA0, 0xA0, 0xA0, 0xFF);\n        SDL_RenderClear(renderer);\n\n        DrawRects(renderer);\n        DrawLines(renderer);\n        DrawPoints(renderer);\n\n        SDL_RenderPresent(renderer);\n    }\n#ifdef __EMSCRIPTEN__\n    if (done) {\n        emscripten_cancel_main_loop();\n    }\n#endif\n}\n\nint\nmain(int argc, char *argv[])\n{\n    int i;\n    Uint32 then, now, frames;\n\n\t/* Enable standard application logging */\n\tSDL_LogSetPriority(SDL_LOG_CATEGORY_APPLICATION, SDL_LOG_PRIORITY_INFO);\n\n    /* Initialize parameters */\n    num_objects = NUM_OBJECTS;\n\n    /* Initialize test framework */\n    state = SDLTest_CommonCreateState(argv, SDL_INIT_VIDEO);\n    if (!state) {\n        return 1;\n    }\n    for (i = 1; i < argc;) {\n        int consumed;\n\n        consumed = SDLTest_CommonArg(state, i);\n        if (consumed == 0) {\n            consumed = -1;\n            if (SDL_strcasecmp(argv[i], \"--blend\") == 0) {\n                if (argv[i + 1]) {\n                    if (SDL_strcasecmp(argv[i + 1], \"none\") == 0) {\n                        blendMode = SDL_BLENDMODE_NONE;\n                        consumed = 2;\n                    } else if (SDL_strcasecmp(argv[i + 1], \"blend\") == 0) {\n                        blendMode = SDL_BLENDMODE_BLEND;\n                        consumed = 2;\n                    } else if (SDL_strcasecmp(argv[i + 1], \"add\") == 0) {\n                        blendMode = SDL_BLENDMODE_ADD;\n                        consumed = 2;\n                    } else if (SDL_strcasecmp(argv[i + 1], \"mod\") == 0) {\n                        blendMode = SDL_BLENDMODE_MOD;\n                        consumed = 2;\n                    }\n                }\n            } else if (SDL_strcasecmp(argv[i], \"--cyclecolor\") == 0) {\n                cycle_color = SDL_TRUE;\n                consumed = 1;\n            } else if (SDL_strcasecmp(argv[i], \"--cyclealpha\") == 0) {\n                cycle_alpha = SDL_TRUE;\n                consumed = 1;\n            } else if (SDL_isdigit(*argv[i])) {\n                num_objects = SDL_atoi(argv[i]);\n                consumed = 1;\n            }\n        }\n        if (consumed < 0) {\n            SDL_Log(\"Usage: %s %s [--blend none|blend|add|mod] [--cyclecolor] [--cyclealpha]\\n\",\n                    argv[0], SDLTest_CommonUsage(state));\n            return 1;\n        }\n        i += consumed;\n    }\n    if (!SDLTest_CommonInit(state)) {\n        return 2;\n    }\n\n    /* Create the windows and initialize the renderers */\n    for (i = 0; i < state->num_windows; ++i) {\n        SDL_Renderer *renderer = state->renderers[i];\n        SDL_SetRenderDrawBlendMode(renderer, blendMode);\n        SDL_SetRenderDrawColor(renderer, 0xA0, 0xA0, 0xA0, 0xFF);\n        SDL_RenderClear(renderer);\n    }\n\n    srand((unsigned int)time(NULL));\n\n    /* Main render loop */\n    frames = 0;\n    then = SDL_GetTicks();\n    done = 0;\n\n#ifdef __EMSCRIPTEN__\n    emscripten_set_main_loop(loop, 0, 1);\n#else\n    while (!done) {\n        ++frames;\n        loop();\n        }\n#endif\n\n\n    SDLTest_CommonQuit(state);\n\n    /* Print out some timing information */\n    now = SDL_GetTicks();\n    if (now > then) {\n        double fps = ((double) frames * 1000) / (now - then);\n        SDL_Log(\"%2.2f frames per second\\n\", fps);\n    }\n    return 0;\n}\n\n/* vi: set ts=4 sw=4 expandtab: */\n"]}